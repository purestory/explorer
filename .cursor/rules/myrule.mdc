---
description: 
globs: 
alwaysApply: true
---
---
description: 프로젝트 핵심 규칙
globs:
  - "**/*" # 모든 파일에 적용 (필요시 경로 지정)
alwaysApply: true
---

# ❗ 중요: Assistant 핵심 준수 사항 ❗

**Assistant는 다음 규칙들을 대화 시작부터 종료까지 일관되게 준수해야 합니다.**

## Ⅰ. 핵심 원칙

1.  **언어:** **항상 한글**로 응답합니다.
2.  **시스템 명령어:** 파일 삭제(`rm`), 복사(`cp`), 이동(`mv`) 등 파일 관련 작업은 **반드시 시스템 명령어를 사용**합니다. (Node.js `fs` 함수 사용 금지: D 상태 진입 방지)
    *   파일명/경로에 특수문자가 포함된 경우 적절히 이스케이핑합니다.
3.  **Sudo 사용:** 시스템 파일/디렉토리 접근 및 수정, 시스템 명령어(`systemctl`, `apt` 등) 실행 시 **반드시 `sudo`를 사용**합니다.
4.  **명령어 결과 확인:** 모든 터미널 명령어 실행 후, **반드시** 출력 결과를 확인하여 오류나 예상치 못한 결과가 없는지 검토합니다.
5.  **테스트 및 검증:** 코딩 시 테스트 가능한 부분은 **반드시 테스트**하여 동작을 확인하고, 시스템 파일 수정이나 서비스 관리 명령 후에는 **반드시 결과를 확인/검증**합니다.
6.  **문제 해결:** 문제 발생 시 로그 확인 등 다양한 방법으로 원인을 파악하고, 해결 방향에 대해 **사용자에게 확인 후 진행**합니다.

## Ⅱ. 코드 수정 (⭐ 가장 중요 ⭐)

### 1. 기본 원칙

*   **함수 단위 수정:** 코드 수정은 **함수 단위**로 진행하는 것을 원칙으로 합니다.
*   **`edit_file` 도구 사용 금지 (긴 파일):** 1000라인 이상 또는 주요 로직 파일(`frontend/script.js`, `backend/server.js` 등) 수정 시 **`edit_file` 도구는 절대 사용하지 않습니다.** (오작동 위험)
*   **함수 중복 확인:** 코드 수정 후, 함수가 중복 정의되었는지 확인하고 이상 여부를 보고합니다. (`util/find_duplicate_functions.py` 활용)
*   **최종 코드 제공 (직접 수정 불가 시):** 유틸리티를 사용한 함수 단위 수정이 불가능할 경우, 수정된 **함수 전체 코드**를 제공하여 사용자가 직접 붙여넣을 수 있도록 합니다.

### 2. 긴 JavaScript 파일 함수 수정 절차 (필수 준수)

JavaScript 파일 내 특정 함수를 수정해야 할 경우, **반드시 다음 절차를 따릅니다:**

1.  **함수 위치/코드 추출 (`find_function.py`):**
    *   `util/find_function.py`를 사용하여 대상 함수의 **시작/끝 라인 번호**를 확인하고, 함수 코드를 **임시 파일** (예: `util/tmp_func_code.js`)로 추출합니다.
    *   명령 예시: `python3 util/find_function.py frontend/script.js handleFileDblClick util/tmp_func_code.js`
    *   함수를 찾지 못하면 사용자에게 함수명을 다시 확인합니다.
2.  **수정된 함수 코드 파일 생성:**
    *   Assistant가 **수정된 내용이 반영된 함수 전체 코드**를 담은 **새로운 파일** (예: `util/modified_handleFileDblClick.js`)을 생성합니다.
    *   **주의:** 1단계에서 추출한 임시 파일을 수정하는 것이 아니라, **수정된 최종 함수 코드를 담은 새 파일을 만드는 것**입니다.
3.  **코드 교체 (`replace_code_block.py`):**
    *   `util/replace_code_block.py`를 사용하여 2단계에서 생성한 **수정된 함수 코드 파일**의 내용을 원본 파일의 해당 라인 범위(1단계에서 확인)에 삽입(교체)합니다.
    *   명령 예시: `python3 util/replace_code_block.py frontend/script.js util/modified_handleFileDblClick.js 2369 2421`
    *   이 스크립트는 원본 파일을 자동으로 백업합니다.

### 3. 기타 코드 수정 관련

*   **`sed` 사용:** `sed`는 함수 단위 수정 절차가 불가능하거나, 단순 텍스트 치환 등 다른 용도로만 제한적으로 사용합니다. 
  - sed를 사용할 경우에도, 해당 부분에 대한 전체 코드를 생성하고, 기본 코드와 치환하는 방법을 사용해, 수정기능(edit_file)은 사용하지마
*   **코드 모듈화:** 가능한 모듈별로 코드를 분리하고, 관련 없는 모듈은 수정하지 않습니다.
*   **Python 실행 파일:** 라이브러리는 별도로 포함하고, `--noconfirm` 옵션을 사용하여 생성합니다. 수정 시 최종 코드를 제공합니다.
*   **단순 일괄 변경:** 정규표현식 등을 이용한 단순 일괄 변경이 필요할 경우, 임시 변환 프로그램 생성을 고려하되 **실행 전 반드시 사용자 확인**을 받습니다.

## Ⅲ. Git 관련

*   **브랜치:** **절대로** 새로운 브랜치를 만들지 말고, **항상 `main` 브랜치에서만 작업**합니다.
*   **커밋/푸시:**
    *   사용자가 **명시적으로 지시할 때만** GitHub에 저장합니다. (예: "깃저장 '커밋메시지'")
    *   커밋 시에는 `git add .` 를 사용합니다.
    *   푸시 시 변경된 `nginx` 설정(`purestory.nginx`)이 있다면 함께 커밋합니다.

## Ⅳ. 시스템 운영 및 설정 관련

*   **시스템 파일 수정 절차:**
    *   `/etc`, `/usr`, `/var/log` 등 시스템 디렉토리 내 파일은 **절대로 직접 수정하지 않습니다.**
    *   1.  수정 내용을 담은 **임시 파일**을 `~/webdav/tmp/`에 생성합니다.
        2.  `sudo cp [임시 파일 경로] [원본 시스템 파일 경로]` 명령으로 덮어씁니다.
        3.  `cat [원본 시스템 파일 경로]` 등으로 수정 내용을 **반드시 확인**합니다.
*   **서비스 관리:** 서비스 `restart`, `stop`, `kill` 등 명령 실행 후에는 **반드시 `status`를 확인**하여 결과를 검증하고 보고합니다.
*   **터미널 편집기 사용 금지:** `vi`, `vim`, `nano` 등 사용 금지.
*   **명령어 줄바꿈 금지:** 터미널 명령어에 줄바꿈 문자(`\n`) 포함 금지.
*   **네트워크 포트:** **8080 포트는 사용하지 않습니다.** (공유기에서 사용 중)
*   **io_uring 오류 무시:** Node.js io_uring 관련 오류는 무시합니다.
*   **명령어 설치:** 필요한 명령어가 설치되어 있지 않으면 설치합니다. (`sudo apt install ...` 등)

## Ⅴ. 유틸리티 도구

*   `util/find_duplicate_functions.py`: JavaScript 파일에서 중복 함수를 찾습니다.
    ```bash
    python3 util/find_duplicate_functions.py <JavaScript 파일 경로>
    ```
*   (`find_function.py`, `replace_code_block.py`는 코드 수정 절차에 명시됨)

## Ⅵ. 프로젝트 정보

*   **서버 주소:** `http://itsmyzone.iptime.org/webdav-explorer/`
*   **GitHub 저장소:** `https://github.com/purestory/webdav` (ID: purestory)
*   **서버 구조:** `frontend` (Nginx) + `backend` (Node.js)

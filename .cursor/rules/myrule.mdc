---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# ❗ 중요: 모든 응답에 반드시 적용해야 하는 핵심 규칙 ❗

**Assistant는 아래 명시된 모든 규칙을 대화 시작 시점부터 종료 시점까지 일관되게 준수해야 합니다. 규칙을 어길 경우 사용자에게 불편을 초래하고 작업에 오류를 발생시킬 수 있습니다.**

코드 수정 후 함수가 중복됐는지 확인해서 이상여부 알려줘
명령어가 설치되어 있지 않으면 명령어를 설치해



자꾸 프로세스가 D로 들어가는 문제 때문에 rm 등 시스템 명령으로 구현해줘

## 💻 개발 및 코드 관련
코딩 시 테스트가 가능한 부분은 반드시 테스트해서 제대로 동작하는지 확인해줘
문제 파악 시 로그를 확인해서 파악해줘

10. **서버 주소:** `http://itsmyzone.iptime.org/webdav-explorer/`
11. **GitHub 저장소:** `https://github.com/purestory/webdav` (사용자 ID: purestory)
12. **서버 구조:** `frontend` (Nginx)와 `backend` (Node.js) 서버를 동시에 운영 중입니다.
13. **코드가 긴 파일 수정:**(1000라인)
# ... existing code ...
9.  **서버 구조:** `frontend` (Nginx)와 `backend` (Node.js) 서버를 동시에 운영 중입니다.
10. **함수 단위 코드 수정 (유틸리티 사용 필수):**
    server.js, script.js 직접 수정시에는 절대 edit_file tool 쓰지마
    * 코드가 긴 파일 수정 시 **edit_file tool**은  **절대 쓰지 마**, 긴 파일은 절대절대 직접 수정하지마(오작동해서 코드를 망쳐놓는 바보야야)

    *   JavaScript 파일 내 특정 함수를 수정해야 할 경우, **반드시** 유틸을 써서 다음 절차대로해해:
        1.  `util/find_function.py`를 사용하여 대상 함수 코드를 임시 파일(예: `util/tmp_func_code.js`)로 추출하고 시작/끝 라인 번호를 확인합니다. 함수를 못찾으면 코드에서 정확한 함수명을 다시 찾아 본후 다시 시도해
           ```bash
           # 예시: frontend/script.js에서 initShortcuts 함수 추출
           python3 util/find_function.py frontend/script.js initShortcuts util/tmp_func_code.js
           ```
           
        2.  추출된 임시 파일(`util/tmp_func_code.js`)의 내용을 사용자에게 제시하거나, 직접 수정합니다.
        3.  수정이 완료된 임시 파일과, 1단계에서 확인한 시작/끝 라인 번호를 사용하여 `util/replace_code_block.py`를 실행하여 원본 파일에 수정 내용을 반영합니다. 이 스크립트는 원본 파일을 자동으로 백업합니다.
           ```bash
           # 예시: 수정된 util/tmp_func_code.js 내용을 원본 파일의 835-880 라인에 삽입
           python3 util/replace_code_block.py frontend/script.js util/tmp_func_code.js 835 880 
           ```
    sed를 사용해서 가능한 모든 것을 처리해

    *   **이 절차는 코드 수정의 정확성과 안전성을 높이기 위함이므로 반드시 준수해야 합니다.**


11. **Python 실행 파일:** 라이브러리는 별도로 포함하고, `--noconfirm` 옵션을 사용하여 생성합니다. 수정 시 최종 코드를 제공합니다.
# ... existing code ...

14. **Python 실행 파일:** 라이브러리는 별도로 포함하고, `--noconfirm` 옵션을 사용하여 생성합니다. 수정 시 최종 코드를 제공합니다.
15. **코드 모듈화:** 가능한 모듈별로 코드를 분리하고, 관련 없는 모듈은 수정하지 마십시오.
16. **Git 브랜치:** **절대로** 새로운 브랜치를 만들지 말고, **항상 `main` 브랜치에서만 작업**하십시오.
17. **Git 커밋/푸시:**
    *   사용자가 **명시적으로 지시할 때만** GitHub에 저장합니다.
    *   커밋 시에는 `git add .` 를 사용하고,
    *   깃 업로드 시 변경된 `nginx` 설정이 있다면 함께 커밋합니다.
18. **단순 일괄 변경:** 대용량 코드에서 정규표현식 등을 이용한 단순 일괄 변경이 필요할 경우, 임시 변환 프로그램을 만드는 것을 고려할 수 있으나, **실행 전에 반드시 사용자에게 확인**을 받아야 합니다.


## ⚙️ 시스템 운영 및 설정 관련

1.  **Sudo 사용:** 시스템 파일/디렉토리 접근 및 수정, 시스템 명령어(예: `systemctl`, `apt`, `cp /etc/...` 등) 실행 시 **반드시** `sudo`를 사용해야 합니다.
2.  **시스템 파일 수정 절차 (매우 중요):**
    *   `/etc`, `/usr`, `/var/log` 등 시스템 디렉토리 내 파일을 수정할 때는 **절대로 직접 수정하지 마십시오.**
    *   **반드시** 다음 절차를 따르십시오:
        1.  수정할 내용을 담은 **임시 파일**을 사용자 작업 디렉토리(예: `~/webdav/tmp/`)에 생성합니다.
        2.  `sudo cp [임시 파일 경로] [원본 시스템 파일 경로]` 명령어를 사용하여 임시 파일을 원본 경로로 **덮어씁니다.**
        3.  `cat [원본 시스템 파일 경로]` 명령 등으로 복사된 내용을 **반드시 확인**하여 수정이 올바르게 반영되었는지 검증합니다.
3.  **서비스 관리 (상태 확인 시점 명확화):** 서비스를 재시작(`restart`), 멈추거나(`stop`), 종료(`kill` 등)하는 명령을 사용한 경우, **반드시 명령 실행 후**에 해당 서비스의 상태(`status`)를 **확인하여 명령이 성공적으로 반영되었는지 검증하고 그 결과를 사용자에게 명확히 보고**해야 합니다. (명령 실행 전 상태 확인은 불필요합니다.)
 - 제발 프로세스를 죽였으면, 죽었는지 확인해줘
4.  **명령어 결과 확인 (매우 중요):** 모든 터미널 명령어 실행 후에는 **반드시** 출력 결과를 꼼꼼히 확인하고, 오류 메시지(stderr)나 예상치 못한 출력이 없는지 검토해야 합니다. 문제가 없다고 **섣불리 가정하지 마십시오.**
5.  **네트워크 포트:** **8080 포트는 사용하지 마십시오.** (공유기에서 사용 중)
6.  **터미널 편집기 사용 금지:** `vi`, `vim`, `nano` 등 터미널 내장 편집기는 사용하지 마십시오. 파일 수정은 `edit_file` 도구나 위에서 명시한 시스템 파일 수정 절차를 따르십시오.
7.  **명령어 줄바꿈 금지:** 터미널 명령어 실행 시 명령어 자체에 줄바꿈 문자(`\n`)가 포함되지 않도록 주의하십시오. 복잡한 명령은 임시 스크립트 파일을 사용하는 것을 고려하십시오.
8.  **io_uring 오류 무시:** **io_uring 관련 오류는 무시하십시오.** (Node.js에서 사용하지 않음)
9.  **⚠️⚠️⚠️ 시스템 명령어 필수 사용 (절대 규칙) ⚠️⚠️⚠️**
    * **파일 작업은 항상 시스템 명령어로 수행:** 파일 삭제(`rm`), 복사(`cp`), 이동(`mv`) 등의 작업은 **반드시** 시스템 명령어를 사용해야 합니다.
    * 파일이름에나 경로에 대한 단, 특수문자 처리는 더욱 강화 해줘
    * **Node.js 네이티브 함수 사용 금지:** `fs.promises.rm`, `fs.promises.rename`, `fs.promises.copyFile` 등의 Node.js 네이티브 함수를 사용하지 마십시오.
    * **이유:** 프로세스가 D 상태(uninterruptible sleep)로 진입하는 문제를 방지하기 위함입니다.
    * **특수문자 처리:** 시스템 명령어 사용 시 파일명에 특수문자가 포함된 경우, 반드시 적절한 이스케이핑을 적용하십시오.
    * **어떤 이유로도 이 규칙을 위반하지 마십시오.**



## 🛠️ 유틸리티 도구 관련

19. **유틸리티 도구 사용 방법:**
 
    * **코드 정리 및 중복 감지 도구:**
      * `find_duplicate_functions.py`: JavaScript 파일에서 중복 함수 찾기
        ```bash
        python3 util/find_duplicate_functions.py <JavaScript 파일 경로>
        ```
 
## 💬 소통 및 기타

20. **언어:** **항상 한글**로 응답합니다.
21. **문제 해결:** 문제가 발생하면 다양한 방법으로 원인을 파악하고, 원인 분석 후 수정 방향에 대해 **사용자에게 확인 후 진행**합니다. (예: "이러한 원인으로 파악되는데, 이렇게 수정해도 될까요?")

// ... existing code ...